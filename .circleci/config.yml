version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here   
       workflow_id:
        type: string  
    steps: 
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            SUCCESS=$(curl -H "Content-Type: text/plain" -H "token: << parameters.workflow_id >>" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
            if(( ${SUCCESS}==1 )); 
            then
            cd ~/cicdproject/backend
            npm install
            npm run migrations:revert
            fi
          when: on_fail

parameters:
  circleci_image:
    type: string
    default: circleci/node:13.8.0
  amazon_image:
    type: string
    default: amazon/aws-cli
  alpine_image:
    type: string
    default: python:3.7-alpine3.11

orbs:
  slack: circleci/slack@4.4.3

jobs:
  build-frontend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - run:
          name: Install frontend dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm run build
            cd dist
            ls
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      #- #slack/notify:
        #  event: fail
        #  template: basic_fail_1
      
  build-backend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - run:
          name: Install backend dependencies
          command: |
            cd backend
            npm i
      - run:
          name: Build backend
          command: |
            cd backend
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - restore_cache:  # Restore from cache
          key: frontend-build
      # Your job code here
      - run: 
          name: Install dependencies
          command: |
            cd frontend
            npm i
      - run: 
          name: Test frontend
          command: |
            cd frontend
            npm run test  

  test-backend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - restore_cache:  # Restore from cache
          key: backend-build
      # Your job code here
      - run: 
          name: Install dependencies
          command: |
            cd backend
            npm i
      - run: 
          name: Test Backend
          command: |
            cd backend
            npm run test
       
  scan-frontend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - restore_cache:  # Restore from cache
          key: frontend-build
      # Your job code here
      - run:
          name: Install frontend dependencies
          command: |
            cd frontend
            npm install
      - run: 
          name: Scan frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
    
  scan-backend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - restore_cache:  # Restore from cache
          key: backend-build
      # Your job code here
      - run: 
          name: Scan Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      
  deploy-infrastructure:
    docker: 
    - image: << pipeline.parameters.amazon_image >>
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible/
            rm ./inventory.txt
            BACKEND_DNS=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --filters 'Name=tag:project,Values=udapeople-backend' --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            echo "[web]" >> ./inventory.txt
            echo ${BACKEND_DNS} >> ./inventory.txt
            cat ./inventory.txt
            yum install -y tar gzip
            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID}" \
               --request PUT \
               --data ${BACKEND_DNS} \
               https://api.memstash.io/values/backend_dns
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: << pipeline.parameters.alpine_image >>
    steps:
      - checkout
      - add_ssh_keys:  # Add ssh keys with fingerprint
          fingerprints: [78:47:d2:7e:85:17:df:d9:4e:92:de:9b:66:3e:71:ba]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible/
            ansible-playbook -i ./inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  
        
  run-migrations:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
     # - run:
     #     name: Install dependencies
     #     command: |
     #       cd backend
     #       npm install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run build 
            touch output.txt
            npm run migrations >> output.txt
      - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            cd backend
            if [ -s output.txt ]
            then
              if grep "has been executed successfully" output.txt
              then
                success="1"
                curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data ${success} \
               https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              fi
            fi
      #- destroy-environment:
      #    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
    - image: << pipeline.parameters.amazon_image >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip 
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            cd frontend 
            npm install   
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backend_dns)
            echo ${BACKEND_IP}
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm install
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            aws s3 cp ./frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
      # Here's where you will add some code to rollback on failure      
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   

  deploy-backend:
    docker:
      - image: << pipeline.parameters.alpine_image >> # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:  # Add ssh keys with fingerprint
          fingerprints: ["ce:24:79:a5:05:46:f6:26:36:b5:61:e5:e9:11:25:4e"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm i
            pip install awscli
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd .circleci/ansible/
            ansible-playbook -i ./inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: << pipeline.parameters.alpine_image >> # Lightweight Docker image 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backend_dns)
            echo ${BACKEND_DNS}    
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            if curl -s "http://${BACKEND_DNS}:3030/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com#employees"
            if curl -s ${FRONTEND_URL} | grep "Welcome"  
            then
              echo "Successful Smoke-test"
              return 1
            else
              echo "Unsuccessful Smoke-test"
              return 0
            fi
      # Here's where you will add some code to rollback on failure  
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: << pipeline.parameters.amazon_image >> # Docker image here that supports AWS CLI
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      - image: << pipeline.parameters.circleci_image >> # Docker image here
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            
workflows:
  default:
    jobs:
      #- build-frontend
      - build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      #- scan-frontend:
      #    requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-backend,scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      #- smoke-test:
      #    requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup:
      #    requires: [cloudfront-update]